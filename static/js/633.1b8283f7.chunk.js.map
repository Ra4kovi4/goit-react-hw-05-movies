{"version":3,"file":"static/js/633.1b8283f7.chunk.js","mappings":"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","sources":["components/MovieInfo/MovieInfo.styled.js","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.js","components/MovieInfo/MovieInfo.js","service/fetchMoovie.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { TbArrowBigLeftLines } from 'react-icons/tb';\nexport const StyledNavLink = styled(NavLink)`\n  display: flex;\n  align-items: center;\n  color: black;\n  font-size: 16px;\n  padding: 10px;\n  border: 1px solid grey;\n  border-radius: 10px;\n  background-color: #097b78;\n\n  width: 170px;\n  text-decoration: none;\n  :hover,\n  :focus {\n    background-color: #09c5c0;\n  }\n`;\nexport const StyledIcon = styled(TbArrowBigLeftLines)`\n  margin-right: 5px;\n`;\nexport const Container = styled.div`\n  width: 100%;\n  padding: 15px;\n`;\n\nexport const StyledLink = styled(Link)`\n  padding: 15px;\n  margin-right: 10px;\n  color: black;\n  border: 1px solid grey;\n  border-radius: 10px;\n  background-color: #097b78;\n  text-decoration: none;\n  :hover,\n  :focus {\n    background-color: #09c5c0;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  padding-top: 15px;\n`;\nexport const Wrapper = styled.div`\n  display: block;\n  margin-left: 30px;\n`;\nexport const Poster = styled.img`\n  display: block;\n  width: 350px;\n  height: auto;\n  max-width: 100%;\n`;\nexport const TitleMovie = styled.h2`\n  font-size: 18px;\n  color: black;\n`;\nexport const DetailsList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\nexport const DetailsItem = styled.li`\n  margin-bottom: 10px;\n`;\n","import PropTypes from 'prop-types';\n\nimport {\n  Wrapper,\n  Poster,\n  TitleMovie,\n  InfoWrapper,\n  DetailsList,\n  DetailsItem,\n} from './MovieDetails.styled';\n\nexport const MovieDetails = ({ movie }) => {\n  return (\n    <InfoWrapper>\n      <Poster\n        src={\n          movie.poster_path\n            ? `https://image.tmdb.org/t/p/original${movie.poster_path}`\n            : 'https://i.postimg.cc/g2dNFPgn/Placeholder.png'\n        }\n        alt={movie.title}\n      />\n      <Wrapper>\n        <TitleMovie>\n          {movie.title} ({parseFloat(movie.release_date)})\n        </TitleMovie>\n        <DetailsList>\n          <DetailsItem>\n            <p>\n              User score: <b>{movie.vote_average.toFixed(1)}</b>\n            </p>\n          </DetailsItem>\n          <DetailsItem>\n            <b>Overwiew:</b>\n            <p>{movie.overview}</p>\n          </DetailsItem>\n          <DetailsItem>\n            <b>Genres: </b>\n            <p> {movie.genres.map(genre => genre.name).join(', ')}</p>\n          </DetailsItem>\n        </DetailsList>\n      </Wrapper>\n    </InfoWrapper>\n  );\n};\n\nMovieDetails.propTypes = {\n  movie: PropTypes.shape({\n    poster_path: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\n\nimport {\n  Container,\n  StyledNavLink,\n  StyledIcon,\n  StyledLink,\n} from './MovieInfo.styled';\nimport { MovieDetails } from 'components/MovieDetails/MovieDetails';\n\nimport { getMoovieById } from '../../service/fetchMoovie';\n// import { Moviedetails } from '../MovieDetails/MovieDetails';\nconst MovieInfo = () => {\n  const [movie, setMovie] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    const fetchMovieById = async () => {\n      try {\n        const data = await getMoovieById(Number(id));\n        setMovie(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchMovieById();\n  }, [id]);\n\n  return (\n    <>\n      <Container>\n        <StyledNavLink to={backLinkHref}>\n          <StyledIcon />\n          Back to movies\n        </StyledNavLink>\n        {movie && <MovieDetails movie={movie} />}\n      </Container>\n      <Container>\n        <StyledLink to=\"credits\" state={{ from: backLinkHref }}>\n          Cast\n        </StyledLink>\n        <StyledLink to=\"reviews\" state={{ from: backLinkHref }}>\n          Reviews\n        </StyledLink>\n      </Container>\n      <Outlet />\n    </>\n  );\n};\nexport default MovieInfo;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = '27957f45446c592c6fc00916bd09edac';\n//запрос популярных фильмов\nexport const getPopularityMoovie = async () => {\n  const { data } = await axios.get('/trending/all/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return data.results;\n};\n\n//запрос фильма по ключевому слову\nexport const getMoovieByName = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query,\n      api_key: KEY,\n      include_adult: false,\n    },\n  });\n  return data.results;\n};\n\n//запрос инфо о фильме по id\nexport const getMoovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return data;\n};\n\n//запрос на каст фмльма\n\nexport const getMooviecastById = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return data.cast;\n};\n\n//запрос ревью на фильм\nexport const getMovieReview = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return data.results;\n};\n"],"names":["StyledNavLink","styled","NavLink","StyledIcon","TbArrowBigLeftLines","Container","StyledLink","Link","InfoWrapper","Wrapper","Poster","TitleMovie","DetailsList","DetailsItem","MovieDetails","movie","src","poster_path","alt","title","parseFloat","release_date","vote_average","toFixed","overview","genres","map","genre","name","join","useState","setMovie","id","useParams","backLinkHref","useLocation","state","from","useEffect","fetchMovieById","getMoovieById","Number","data","console","log","to","axios","KEY","getPopularityMoovie","params","api_key","results","getMoovieByName","query","include_adult","getMooviecastById","cast","getMovieReview"],"sourceRoot":""}